// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: TiltPlusPlus v1.7
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2017 - 2020, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project if you are making money off your
//   mod/project, including commercially-sold games, or via crowdfunding
//   platforms like Kickstarter, Patreon, Kofi and other similar platforms
//
//===========================================================================

//===========================================================================
//
// Tilt++.pk3
//
// Unified player camera tilting for strafing, moving, swimming and death
//
// Written by Nash Muhandes
//
//===========================================================================

class TiltPlusPlusHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.A_GiveInventory("Z_TiltMe", 1);
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		players[e.PlayerNumber].mo.A_GiveInventory("Z_TiltMe", 1);
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == 'EV_ResetToDefault')
		{
			ResetToDefault();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void ResetToDefault(void)
	{
		CVar cv;

		cv = CVar.FindCVar('tiltplusplus_strafetilt');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_strafetiltspeed');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_strafetiltangle');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_strafetiltinvert');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_movetilt');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_movetiltspeed');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_movetiltangle');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_movetiltscalar');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_turntilt');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_turntiltscalar');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_turntiltinvert');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_underwatertilt');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_underwatertiltspeed');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_underwatertiltangle');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_underwatertiltscalar');
		if (cv) cv.ResetToDefault();
		cv = CVar.FindCVar('tiltplusplus_deathtilt');
		if (cv) cv.ResetToDefault();
	}
}

class Z_TiltMe : CustomInventory
{
	double strafeInput;
	double moveTiltOsc, underwaterTiltOsc;
	double deathTiltOsc;
	double deathTiltAngle;

	double lastAngle;
	double lastPitch;
	double lastRoll;

	transient CVar cvStrafeTilt;
	transient CVar cvStrafeTiltSpeed;
	transient CVar cvStrafeTiltAngle;
	transient CVar cvStrafeTiltInvert;

	transient CVar cvMoveTilt;
	transient CVar cvMoveTiltSpeed;
	transient CVar cvMoveTiltAngle;
	transient CVar cvMoveTiltScalar;

	transient CVar cvTurnTilt;
	transient CVar cvTurnTiltScalar;
	transient CVar cvTurnTiltInvert;

	transient CVar cvUnderwaterTilt;
	transient CVar cvUnderwaterTiltSpeed;
	transient CVar cvUnderwaterTiltAngle;
	transient CVar cvUnderwaterTiltScalar;

	transient CVar cvDeathTilt;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Inventory.MaxAmount 1;
		+Inventory.UNDROPPABLE
		+Inventory.UNTOSSABLE
		+Inventory.AUTOACTIVATE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void DoEffect(void)
	{
		if (Owner && Owner is "PlayerPawn")
		{
			DoViewTilt();
			UpdateViewAngles();
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool bIsOnFloor(void)
	{
		return (Owner.Pos.Z == Owner.FloorZ) || (Owner.bOnMObj);
	}

	bool bIsCrouching(void)
	{
		return Owner.GetCameraHeight() <= (Owner.player.mo.ViewHeight / 2);
	}

	double GetVelocity(bool xyOnly = false)
	{
		if (xyOnly) return Owner.Vel.XY.Length();
		return Owner.Vel.Length();
	}

	int GetWaterLevel(void)
	{
		return Owner.WaterLevel;
	}

	bool bIsPlayerAlive(void)
	{
		return Owner.Health > 0;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	CVar GetCVar(PlayerInfo p, Name cvn, CVar cv)
	{
		if (!cv)
		{
			cv = CVar.GetCVar(cvn, p);
		}
		return cv;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void DoViewTilt(void)
	{
		PlayerInfo p = Owner.player;
		if (!p) return;

		// CVARS ///////////////////////////////////////////////////////////////
		bool strafeTiltEnabled = GetCVar(p, 'tiltplusplus_strafetilt', cvStrafeTilt).GetBool();
		double strafeTiltSpeed = GetCVar(p, 'tiltplusplus_strafetiltspeed', cvStrafeTiltSpeed).GetFloat();
		double strafeTiltAngle = GetCVar(p, 'tiltplusplus_strafetiltangle', cvStrafeTiltAngle).GetFloat();
		bool strafeTiltInvert = GetCVar(p, 'tiltplusplus_strafetiltinvert', cvStrafeTiltInvert).GetBool();

		bool moveTiltEnabled = GetCVar(p, 'tiltplusplus_movetilt', cvMoveTilt).GetBool();
		double moveTiltSpeed = GetCVar(p, 'tiltplusplus_movetiltspeed', cvMoveTiltSpeed).GetFloat();
		double moveTiltAngle = GetCVar(p, 'tiltplusplus_movetiltangle', cvMoveTiltAngle).GetFloat();
		double moveTiltScalar = GetCVar(p, 'tiltplusplus_movetiltscalar', cvMoveTiltScalar).GetFloat();

		bool turnTiltEnabled = GetCVar(p, 'tiltplusplus_turntilt', cvTurnTilt).GetBool();
		double turnTiltScalar = GetCVar(p, 'tiltplusplus_turntiltscalar', cvTurnTiltScalar).GetFloat();
		bool turnTiltInvert = GetCVar(p, 'tiltplusplus_turntiltinvert', cvTurnTiltInvert).GetBool();

		bool underwaterTiltEnabled = GetCVar(p, 'tiltplusplus_underwatertilt', cvUnderwaterTilt).GetBool();
		double underwaterTiltSpeed = GetCVar(p, 'tiltplusplus_underwatertiltspeed', cvUnderwaterTiltSpeed).GetFloat();
		double underwaterTiltAngle = GetCVar(p, 'tiltplusplus_underwatertiltangle', cvUnderwaterTiltAngle).GetFloat();
		double underwaterTiltScalar = GetCVar(p, 'tiltplusplus_underwatertiltscalar', cvUnderwaterTiltScalar).GetFloat();

		bool deathTiltEnabled = GetCVar(p, 'tiltplusplus_deathtilt', cvDeathTilt).GetBool();

		// Shared variables we'll need later
		double r = 0.0, v = 0.0;

		//===========================================================================
		//
		// Strafe Tilting
		//
		//===========================================================================

		// normalized strafe input
		if (strafeTiltEnabled && bIsOnFloor() && bIsPlayerAlive())
		{
			int dir;
			if (strafeTiltInvert) dir = -1;
			else dir = 1;
			strafeInput = strafeTiltSpeed * (Owner.GetPlayerInput(MODINPUT_SIDEMOVE) / 10240.0);
			strafeInput *= strafeTiltAngle;
			strafeInput *= dir;

			// tilt!
			lastRoll += strafeInput;
		}

		//===========================================================================
		//
		// Movement Tilting
		//
		//===========================================================================

		if (moveTiltEnabled && bIsOnFloor() && bIsPlayerAlive())
		{
			// get player's velocity
			v = GetVelocity() * moveTiltScalar;

			// increment angle
			moveTiltOsc += moveTiltSpeed;

			// clamp angle
			if (moveTiltOsc >= 360. || moveTiltOsc < 0.)
			{
				moveTiltOsc = 0.;
			}

			// calculate roll
			r = Sin(moveTiltOsc);
			r *= moveTiltAngle;
			r *= v;

			// tilt!
			lastRoll += r;
		}

		//===========================================================================
		//
		// Turn Tilting
		//
		//===========================================================================

		if (turnTiltEnabled && bIsPlayerAlive())
		{
			// get player look input
			double xinput = PlayerPawn(Owner).GetPlayerInput(MODINPUT_YAW) * (turnTiltInvert ? -1 : 1);
			xinput = turnTiltScalar * xinput / 32767.0;
			r = xinput;

			// tilt!
			lastRoll += r;
		}

		//===========================================================================
		//
		// Underwater Tilting
		//
		//===========================================================================

		if (GetWaterLevel() >= 3 && underwaterTiltEnabled)
		{
			// fixed rate of 15
			v = 15. * underwaterTiltScalar;

			// increment angle
			underwaterTiltOsc += underwaterTiltSpeed;

			// clamp angle
			if (underwaterTiltOsc >= 360. || underwaterTiltOsc < 0.)
			{
				underwaterTiltOsc = 0.;
			}

			// calculate roll
			r = Sin(underwaterTiltOsc);
			r *= underwaterTiltAngle;
			r *= v;

			// tilt!
			lastRoll += r;
		}

		//===========================================================================
		//
		// Death Tilting
		//
		//===========================================================================

		if (!bIsPlayerAlive() && deathTiltEnabled)
		{
			double deathTiltSpeed = 1.0;

			if (deathTiltAngle == 0)
			{
				// vary the angle a little
				deathTiltAngle = -90.f;
				deathTiltAngle += FRandom(-45.f, 45.f);
				deathTiltAngle *= RandomPick(-1, 1);
			}

			if (deathTiltOsc < 22.5)
			{
				deathTiltOsc += deathTiltSpeed;
			}

			r = Sin(deathTiltOsc);
			r *= deathTiltAngle;

			// tilt!
			lastRoll += r;
		}
		else
		{
			deathTiltOsc = 0;
			deathTiltAngle = 0;
		}
	}

	void UpdateViewAngles(void)
	{
		Owner.A_SetViewAngle((Owner.ViewAngle + lastAngle) * 0.5, SPF_INTERPOLATE);
		Owner.A_SetViewPitch((Owner.ViewPitch + lastPitch) * 0.5, SPF_INTERPOLATE);
		Owner.A_SetViewRoll((Owner.ViewRoll + lastRoll) * 0.5, SPF_INTERPOLATE);

		lastAngle *= 0.5;
		lastPitch *= 0.5;
		lastRoll *= 0.5;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
}
